[NEW SESSION] : 2016-12-26[19:14:42]Monday
[19:14:57] Implemented a very basic engine and the paddle object. Still need to 
limit the framerate properly and tidy up the code.
[END OF SESSION] : 2016-12-26[19:16:05]Monday
Session time: 02:01:23
Project time: 0d. 02:01:23

[NEW SESSION] : 2017-01-03[11:59:38]Tuesday
[11:59:47] Iplemented outro as a proper function.
[14:44:42] implemented paddle movement and clamped FPS at 60.
[END OF SESSION] : 2017-01-03[14:45:34]Tuesday
Session time: 03:15:56
Project time: 0d. 05:17:19

[NEW SESSION] : 2017-01-04[07:21:50]Wednesday
[11:48:05] improved code structure and optimised a bit.
- Implemented the brick object and got some bricks to render.
- Created some placeholder graphics for bricks and balls.
[END OF SESSION] : 2017-01-04[11:50:22]Wednesday
Session time: 04:28:32
Project time: 0d. 09:45:52

[NEW SESSION] : 2017-01-06[10:46:17]Friday
[12:09:48] implementing ball with angular bounces in mind
[END OF SESSION] : 2017-01-06[12:10:24]Friday
Session time: 01:39:07
Project time: 0d. 11:24:59

[NEW SESSION] : 2017-01-06[14:11:58]Friday
[14:12:17] Implemented ball, calculating directional speed by bounce angle.
Prety neat, but will gave to use floating point, as now some speed is lost due
to precision (full pixels only).
[END OF SESSION] : 2017-01-06[14:14:31]Friday
Session time: 01:02:33
Project time: 0d. 12:27:32

[NEW SESSION] : 2017-01-07[10:25:19]Saturday
[13:02:06] migrated ball speed and coordinate calculations from integral to floa
ting-point calculations.
[END OF SESSION] : 2017-01-07[13:04:32]Saturday
Session time: 02:39:13
Project time: 0d. 15:06:45

[NEW SESSION] : 2017-01-14[18:37:39]Saturday
[18:38:05] implemented basig box-box collision detection.
[18:38:30] tried out several approaches to collision detection and then(should h
ave done this first) done some extensive research.
[18:39:51] implemented collision handling that does not work. Will have to rewri
te.
[END OF SESSION] : 2017-01-14[18:40:40]Saturday
Session time: 09:43:01
Project time: 1d. 00:49:46

[NEW SESSION] : 2017-01-16[21:52:11]Monday
[21:52:36] One of the dirtiest code examples was produced today... It kind-of
works, but just as a place-holder.
--- TODO - Remove dirty code ---
- FIX ball class so internal functions only do what they are supposed to do.
- FIX texture handling, so that they can be shared.
- FIX collision detection logic, to also handle the paddle.
[END OF SESSION] : 2017-01-16[21:58:31]Monday
Session time: 02:36:20
Project time: 1d. 03:26:06

[NEW SESSION] : 2017-01-16[22:03:10]Monday
[22:03:12] On the up side though, we have a ball that
handles collisions correctly ~90 percent of the time.
And bricks do get destroyed when hit by the ball.
[END OF SESSION] : 2017-01-16[22:05:41]Monday
Session time: 00:02:31
Project time: 1d. 03:28:37

[NEW SESSION] : 2017-01-19[08:13:19]Thursday
[08:13:49] Spent a couple of hours designing and implementing texture sharing. S
till a little bit to go.
[END OF SESSION] : 2017-01-19[08:15:07]Thursday
Session time: 02:01:48
Project time: 1d. 05:30:25

[NEW SESSION] : 2017-01-20[08:05:10]Friday
[08:05:23] got stuck implementing shared textures... learning about smart
pointers and writing code that segfaults on vector.push_back() xD
[END OF SESSION] : 2017-01-20[08:07:11]Friday
Session time: 01:32:01
Project time: 1d. 07:02:26

[NEW SESSION] : 2017-01-21[13:47:53]Saturday
[13:48:00] Fixed one of the dumbest errors I have ever made, and thus done
implementing the shared texture handling system.
[END OF SESSION] : 2017-01-21[13:49:52]Saturday
Session time: 02:01:59
Project time: 1d. 09:04:25

